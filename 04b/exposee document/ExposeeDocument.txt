Exposee Dokumentation – PostgreSQL
Din opgave som integrator
Du skal forbinde til databasen som forskellige brugere og teste, hvad du kan og ikke kan.

Dine opgaver:
• Forbind til databasen med hver bruger (user1, user2, user3, user4).
• Test: SELECT, INSERT, UPDATE, DELETE.
• Dokumentér hvad du kan og ikke kan med screenshots.
• Vurder hvilken bruger har adgang til hvad.
• Bed mig opdatere dokumentationen hvis noget mangler.
Database Information
• IP: 10.136.138.222
• Port: 5432
• Database Navn: secure_db
• Container Navn: my_postgres
Brugere
Brugernavn	Password
user1	password1
user2	password2
user3	password3
user4	admin

Det er din opgave at teste hvilke brugere der har adgang til hvad. Ingen yderligere information gives.
Start databasen i Docker
1. Sørg for at Docker kører.
2. Start containeren:
   docker start my_postgres
3. Tjek status:
   docker ps
Forbind via CLI som specifik bruger
docker run --rm -it postgres psql "postgresql://[BRUGERNAVN]:[PASSWORD]@10.136.138.222:5432/secure_db"

Eksempel for user2:
docker run --rm -it postgres psql "postgresql://user2:password2@10.136.138.222:5432/secure_db"
Tabelstruktur (til testformål)
Kolonnenavn	Datatype
id		SERIAL PRIMARY KEY
username	TEXT
role		TEXT
secret_info	TEXT
Commands du kan prøve
Read (SELECT):
SELECT * FROM cell_level_view;
Insert:
INSERT INTO sensitive_data (username, role, secret_info)
VALUES ('user3', 'editor', 'secret_by_user3');
Update:
UPDATE sensitive_data
SET secret_info = 'updated_by_user3'
WHERE username = current_user;
Delete:
DELETE FROM sensitive_data
WHERE secret_info = 'secret_by_user3';

Yderligere test:
SELECT * FROM sensitive_data;
INSERT INTO sensitive_data (username, role, secret_info)
VALUES ('[brugernavn]', '[rolle]', '[hemmelig information]');
UPDATE sensitive_data
SET secret_info = '[ny værdi]'
WHERE username = '[eksisterende brugernavn]';
DELETE FROM sensitive_data
WHERE username = '[brugernavn]';
Afslut og stop containeren
docker stop my_postgres
